# -*- mode: python -*-
import os
import sys
sys.path+=['.']

from kivy.tools.packaging.pyinstaller_hooks import get_deps_minimal, hookspath, runtime_hooks
from PyInstaller.utils.hooks import collect_submodules

# This setting must match with setting of environment in main.py file
# View more on https://kivy.org/doc/stable/api-kivy.tools.packaging.pyinstaller_hooks.html#kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal
kivy_core = {
    'window': True,
    'clipboard': 'sdl2',
    'image': True,
    'text': True,
    'video': 'null',
    'audio': None,
    # 'audio': ['sdl2'],
    'camera': None,
    'spelling': None,
}

if sys.platform == 'win32':
    from kivy.deps import sdl2, glew
    deps = [Tree(p) for p in (sdl2.dep_bins + glew.dep_bins)]
    hiddenimports = []
    binaries = []
    excludes = []
    datas = []

    if kivy_core['camera']:
        kivy_core['camera'] = 'opencv'

elif sys.platform == 'darwin':
    deps = []
    hiddenimports = []
    binaries = []
    excludes = []
    datas = []

    if kivy_core['camera']:
        kivy_core['camera'] = 'avfoundation'
    if kivy_core['audio']:
        kivy_core['audio'].append('avplayer')

else:
    raise RuntimeError(
        "This build spec doesn't support your platform.\n"
        "But it can also run well if you add some config for your target platform."
    )

hiddenimports += [
    'kivy.weakmethod', # I don't know why pyinstaller forgot to include it
]

excludes += [
    'lib2to3',
    'docutils', # Enable this if you use RstDocument
    'numpy', # Include because of camera android, picamera ?
]

# ffpyplayer always includes for some reason
if not kivy_core['video'] or kivy_core['video'] == 'null':
    excludes.append('ffpyplayer')

datas += [
    ('./kivyrtc/data','kivyrtc/data'),
    ('./kivyrtc/*.kv', 'kivyrtc'),
    ('./kivyrtc/tools/*.kv', 'kivyrtc/tools'),
    ('./kivyrtc/uix/*.kv', 'kivyrtc/uix'),
]

# Get config generated by kivy
extra = get_deps_minimal(**kivy_core)
for i in excludes:
    extra['excludes'] += collect_submodules(i)

extra['hiddenimports'] += hiddenimports

# Kivy before v1.10.1, not have key 'binaries'
if extra.get('binaries'):
    extra['binaries'] += binaries
else:
    extra['binaries'] = binaries

# Embedde kivy file into python file
# from buildtools import embedde_kivy_file
# pathex = [embedde_kivy_file('block')]
pathex = ['.']

block_cipher = None

a = Analysis(
    ['main.py'],
    pathex=pathex,
    datas=datas,
    hookspath=hookspath(),
    runtime_hooks=runtime_hooks(),
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
    **extra
)

pyz = PYZ(
    a.pure,
    a.zipped_data,
    cipher=block_cipher
)

exe = EXE(
    pyz,
    a.scripts,
    [],
    exclude_binaries=True,
    name='Kivy RTC',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    icon='./kivyrtc/data/icon.ico',
    console=False
)

coll = COLLECT(
    exe,
    a.binaries,
    a.zipfiles,
    a.datas,
    *deps,
    icon='./kivyrtc/data/icon.ico',
    strip=False,
    upx=True,
    name='Kivy RTC'
)

if sys.platform == 'darwin':
    app = BUNDLE(
        coll,
        name='Kivy RTC.app',
        icon='./kivyrtc/data/icon.icns',
        bundle_identifier=None,
        info_plist={
            'NSPrincipleClass': 'NSApplication',
            'NSHighResolutionCapable': True,
            },
    )
